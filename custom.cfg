route[REQINIT]{
   set_reply_no_connect();
    force_rport();
        if(src_ip!=myself) {
        if($sht(ipban=>$si)!=$null) {
            xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
            exit;
        }
        
        if (!pike_check_req()) {
            xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
            $sht(ipban=>$si) = 1;
            exit;
        }
    }

    #if(is_method("OPTIONS") && is_myself("$ru") && $rU==$null) {
    if(is_method("OPTIONS") && is_myself("$ru")) {
            sl_send_reply("200","Incoming option");
    if($ua =~ SCANNERS_BLACKLIST ){
        sl_send_reply("503","Don't allowed");
            exit;
            }
    }
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if(!sanity_check("17895", "7")) {
        xlog("Malformed SIP request from $si:$sp\n");
        exit;
    }
}   



        
route[AUTH]{
    if is_method("REGISTER")||(from_uri==myself){
    if(!auth_check("$fd", "subscriber", "1")){
        auth_challenge("$fd", "0");
    consume_credentials();
    exit;
    }
    }
}

route[REGISTRAR]{
    if(!is_method("REGISTER"))return;
    if(!save("location")){
        sl_reply_error();
    }
    exit;
}


route[NATMANAGE]{
    force_rport();
    if is_request() && is_method("REGISTER"){
        fix_nated_register();
        return;
    }
    fix_nated_contact();
    if(is_method("UPDATE")){
        sl_send_reply("200", "ok");
        }
    //add_contact_alias();

   if isflagset(FLAG_TO_CARRIERS){
        fix_nated_contact();
        return;
    }
    if !isflagset(FLAG_INTERNALLY_SOURCED){
        fix_nated_contact();
        return;
    }

}


route[LOCATION]{
    if(!lookup("location")){
        return(-1);
    }
    setflag(FLAG_TO_CARRIERS);
    return(1);
}


route[RELAY]{
    if(!t_is_set("branch_route"))t_on_branch("MANAGE_BRANCH");
    setflag(FLT_ACC);
    if(!t_relay()){
        sl_reply_error();
    }
    append_hf("P-Warn: numeric uri\r\n");
    exit;
}


route[ROUTING]{
    if(is_method("INVITE")&&!has_totag()){
        setflag(FLT_ACC);
        remove_hf("Route");

        if($hdrc(X_FAINUMA) != 0){
            $avp(fainuma)=$hdr(X_FAINUMA);
            remove_hf("X_FAINUMA");
            xlog("L_WARN", "X_FAINUMA:$avp(fainuma) fU:$fU rU:$rU tU:$tU");
        }

        record_route();
    }
}

route[WITHINDLG]{
    if(!has_totag())return(-1);
    if(loose_route())return(1);

    if($fd == MTN_IP){
        if (is_method("ACK|BYE")) {
            $var(a_jsondata) = $_s({"fU":"$fU","ru":"$ru","tU":"$tU","fd":"$fd"});
            xlog("L_WARN", "ACK_KAM3: $var(a_jsondata)");           
            $du="sip:10.75.0.20:5060;r2=on;lr";
            $fs="sip:10.75.0.213:5060";
            t_relay();
            exit;
        }
    }


    if(is_method("ACK")){
        if(t_check_trans()){
            return(1);
            }else{
                exit;
            }
    }   

    sl_send_reply("404", "Not here");
    exit;
}

route[CANCELING]{
    if(is_method("CANCEL")){
        if(!t_check_trans()) {
            setflag(FLT_ACCFAILED);
            exit;
        }
    }
}

route[SDPMANAGE]{
        if(is_request() && is_method("BYE"))||(is_reply()&&$rs>299){
            setflag(FLT_ACC);
            setflag(FLT_ACCFAILED);
        rtpengine_manage("delete-delay=10");
        return;
    }
    if($rb==$null||$rb==""){
        return;
    }
    rtpengine_manage("replace-origin replace-session-connection SIP-source-address ICE=remove $avp(direction)");
}


route[TO_CARRIERS]{
   route(SETCALLERID);
   if(!cr_route("default", "test", "$rU", "$rU", "call_id")){
        if (!t_check_status("408|5[0-9][0-9]")) {
        xlog("L_ERR", "cr_route failed\n");
        return(-1);
        }
          
   }
}

route[SETCALLERID]{
        sql_pvquery("ca", "select callerid from externcallerid where exten='$fU'","$avp(fU)");
        if($avp(fU) != ""||$avp(fU) != 0) $fU = $avp(fU);
    

}

route[CLASSIFY_SOURCE]{
    if(ds_is_from_list(GATEWAYS_SET)){
        if is_method("OPTIONS"){
            sl_send_reply(200, "ok");
            exit;
            }
        setsflag(FLAG_INTERNALLY_SOURCED);
        $avp(direction)="direction=private direction=public";
    }
}

    route[DISPATCH]{
        if(!ds_select_dst(GATEWAYS_SET,1)){
            send_reply("404", "No destination");
            xlog("Destination of DISPATCHER $du");
            return(-1);
            }
        $avp(direction)="direction=public direction=private";
        return(1);
        }
        

