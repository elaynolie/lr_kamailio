#!KAMAILIO
debug=2
log_stderror=no
log_facility=LOG_LOCAL0
log_prefix="$ci|$rm|$rs"
memdbg=5
memlog=5
children=8
tcp_children=8 
disable_tcp=no
mpath="/usr/local/lib64/kamailio/modules/"

auto_aliases=no
listen=udp:ens18:5060
listen=tcp:ens18:5060
listen=udp:ens19:5060
listen=tcp:ens19:5060
alias=sbc.colynn.pro
alias=sip.colynn.pro
listen=tcp:10.75.0.213:9090
tcp_connection_lifetime=3605
tcp_accept_no_cl=yes
http_reply_parse=yes
mhomed=1

#!define PINGER "pinger@172.255.103.121"
#!define DBURL "postgres://postgres:postgres@localhost:5432/kamailio"
#!define MAXEXPIRES 300
#!define SQLOPSDB "ca=>postgres://postgres:postgres@localhost:5432/kamailio"
#!define REGCONTADDR "172.255.103.121:5060"
#!define GATEWAYS_SET 1
#!define FLAG_WITHINDLG 3
#!define FLAG_TO_CLIENT 2
#!define HOSTNAME "sip:proxy@10.75.0.213"
#!define FLAG_INTERNALLY_SOURCED 1
#!define FLT_DIALOG 4
#!define APIFONICA "193.42.48.21"
#!define MTN_IP "196.201.48.139"
#!define INCOMING 4


loadmodule "jsonrpcs.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "kex.so" 
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "dialog.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "carrierroute.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "debugger.so"
loadmodule "db_postgres.so"
loadmodule "sqlops.so"
loadmodule "pike.so"
loadmodule "htable.so" 
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
loadmodule "evrexec.so"
loadmodule "outbound.so"
loadmodule "uac.so"
loadmodule "dispatcher.so"
#loadmodule "topoh.so"
loadmodule "evapi.so"
loadmodule "ipops.so"
loadmodule "drouting.so"
loadmodule "xhttp.so"
loadmodule "xhttp_prom.so"
loadmodule "permissions.so"




modparam("jsonrpcs", "pretty_format", 1)
modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")
modparam("jsonrpcs", "dgram_socket", "/var/run/kamailio/kamailio_rpc.sock")

// ----- ctl params -----
modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")
// ----- tm params -----
// auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
// default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
// default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 180000)
modparam("tm", "remap_503_500", 0)

// ----- rr params -----
// set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 0)
// do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 1)
modparam("rr", "enable_double_rr", 1)

// ----- registrar params -----
modparam("registrar", "method_filtering", 1)
modparam("registrar", "append_branches", 1)
/* uncomment the next line not to allow more than 10 contacts per AOR */
//modparam("registrar", "max_contacts", 10)
// max value for expires of registrations
modparam("registrar", "max_expires", MAXEXPIRES)

// ----- usrloc params -----
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)

modparam("auth_db", "db_url",DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")

// modeDebug
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 0)
modparam("nathelper", "sipping_from", PINGER)

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")

#----- flood detect--------------
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

modparam("htable", "htable", "cids=>size=8")
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")

modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:7724")
#modparam("rtpengine", "rtpengine_sock", "udp:10.75.0.111:2223")
#modparam("rtpengine", "db_url", DBURL)
#modparam("rtpengine", "weight_col", "weight")
#modparam("rtpengine", "setid_default", 1)


#-------Carrierroute module params---------
modparam("carrierroute", "db_url", DBURL)
modparam("carrierroute", "config_source", "db")
modparam("carrierroute", "default_tree", "default")
modparam("carrierroute", "carrierroute_rewrite_prefix_col", "rewrite_prefix")
modparam("carrierroute", "carrierroute_rewrite_suffix_col", "rewrite_suffix")
modparam("carrierroute", "carrierfailureroute_table", "carrierfailureroute")

modparam("sqlops","sqlcon", SQLOPSDB)

#-------DROUTING module params---------
modparam("drouting", "db_url", DBURL)

#-----uac params ------
modparam("uac","reg_db_url", DBURL)
modparam("uac", "reg_db_table", "uacreg")
modparam("uac", "reg_timer_interval", 20)
modparam("uac", "reg_retry_interval",120)
modparam("uac", "reg_contact_addr", REGCONTADDR)
modparam("uac","auth_realm_avp","$avp(realm)")
modparam("uac","auth_username_avp","$avp(uname)")
modparam("uac","auth_password_avp","$avp(passwd)") 
modparam("uac","restore_mode","auto")


#-----dialog params ------
modparam("dialog", "track_cseq_updates", 1)
modparam("dialog", "dlg_flag", FLT_DIALOG)
modparam("dialog", "send_bye", 1)
modparam("dialog", "timeout_noreset", 1)

#-----dispatcher params------------
modparam("dispatcher", "db_url", DBURL)
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_from", HOSTNAME)
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_interval", 30)
modparam("dispatcher", "ds_probing_threshold", 10)
modparam("dispatcher", "ds_ping_reply_codes", "class=2;code=403;code=404;code=488;class=3")

modparam("dialog", "enable_stats", 1)


#modparam("topoh", "mask_key", "YouDoHaveToChangeThisKey")
#modparam("topoh", "mask_ip", "sbc.colynn.pro")
#modparam("topoh", "mask_callid", 1)
#modparam("topoh", "event_mode", 1)

modparam("xhttp_prom", "xhttp_prom_stats", "all")


modparam("permissions", "db_url", DBURL)

request_route{
    if (is_method("OPTIONS") ) {
        sl_send_reply("200", "OK");
        xlog("L_NOTICE", "OPTIONS: from $fU to $rU");
        exit;
    }

    route(CLASSIFY_SOURCE);
    route(NATMANAGE);
    route(CANCELING);
    if route(WITHINDLG){
        route(RELAY);
        exit;
    }
    route(ROUTING);
    if issflagset(FLAG_INTERNALLY_SOURCED){
        if(!route(LOCATION)){
            route(TO_CARRIERS);
        }
    }
    else{
    route(AUTH);
    route(REGISTRAR);
    if(!route(DISPATCH))exit;
}
    route(RELAY);
}


reply_route{
    route(NATMANAGE);
    route(SDPMANAGE);
}

branch_route[MANAGE_BRANCH]{
    route(SDPMANAGE);
}



//event_route[topoh:msg-outgoing] {
//  if($sndto(ip)=="10.75.0.20") {
//    drop;
//  }
//}


event_route[xhttp:request] {
	xlog("Got a request!");
	xlog("$ru");
	$var(xhttp_prom_root) = $(hu{s.substr,0,8});
	if ($var(xhttp_prom_root) == "/metrics") {
			xlog("Called metrics");
			prom_dispatch();
			xlog("prom_dispatch() called");
			return;
	} else
		xhttp_reply("200", "OK", "text/html",
        		"<html><body>Wrong URL $hu</body></html>");
}


    





route[REQINIT]{
   set_reply_no_connect();
    force_rport();
        if(src_ip!=myself) {
        if($sht(ipban=>$si)!=$null) {
            xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
            exit;
        }
        
        if (!pike_check_req()) {
            xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
            $sht(ipban=>$si) = 1;
            exit;
        }
    }

    #if(is_method("OPTIONS") && is_myself("$ru") && $rU==$null) {
    if(is_method("OPTIONS") && is_myself("$ru")) {
            sl_send_reply("200","Incoming option");
            exit;
            }


    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if(!sanity_check("17895", "7")) {
        xlog("Malformed SIP request from $si:$sp\n");
        exit;
    }
}   





    //if(!($ua =~ "Telephone 1.6|kamailio|NCC|local-pbx|MagnusBilling|Voice-GW-IN-DID|PBX-SIP-Proxy|InfinityTelecom-SBC|asterisk|LR_11|FreeSWITCH-mod_sofia|pbx-sip-proxy|NCC-6.3.84.0_1535139600|dble|SmartTel Plus OU /v.7.20A.258.750|NCC-6.3.84.0_1535139600")){
        //sl_send_reply("404", "Not found");
        //xlog("Spammers: $ua from $si\n");
        //exit;
            //}

        
route[AUTH]{
    if is_method("REGISTER")||(from_uri==myself){
    if(!auth_check("$fd", "subscriber", "1")){
        auth_challenge("$fd", "0");
    consume_credentials();
    exit;
    }
    }
}

route[REGISTRAR]{
    if(!is_method("REGISTER"))return;
    if(!save("location")){
        sl_reply_error();
    }
    exit;
}


route[NATMANAGE]{
    force_rport();
    if is_request() && is_method("REGISTER"){
        fix_nated_register();
        return;
    }
    fix_nated_contact();
    if(is_method("UPDATE")){
        sl_send_reply("200", "ok");
        }
}


route[LOCATION]{
    if(!lookup("location")){
        return(-1);
    }
    return(1);
}


route[RELAY]{
    if(!t_is_set("branch_route"))t_on_branch("MANAGE_BRANCH");
    if(!t_relay()){
        sl_reply_error();
    }
    append_hf("P-Warn: numeric uri\r\n");
    exit;
}


route[ROUTING]{
    if(is_method("INVITE")&&!has_totag()){
        remove_hf("Route");

        if($hdrc(X_FAINUMA) != 0){
            $avp(fainuma)=$hdr(X_FAINUMA);
            remove_hf("X_FAINUMA");
            xlog("L_WARN", "X_FAINUMA:$avp(fainuma) fU:$fU rU:$rU tU:$tU");
        }

        record_route();
    }
}

route[WITHINDLG]{
    if(!has_totag())return(-1);
    if(loose_route())return(1);

    if($fd == MTN_IP){
        if (is_method("ACK|BYE")) {
            $var(a_jsondata) = $_s({"fU":"$fU","ru":"$ru","tU":"$tU","fd":"$fd"});
            xlog("L_WARN", "ACK_KAM3: $var(a_jsondata)");           
            $du="sip:10.75.0.20:5060;r2=on;lr";
            $fs="sip:10.75.0.213:5060";
            t_relay();
            exit;
        }
    }


    if(is_method("ACK")){
        if(t_check_trans()){
            return(1);
            }else{
                exit;
            }
    }   

    sl_send_reply("404", "Not here");
    exit;
}

route[CANCELING]{
    if(is_method("CANCEL")){
        if(!t_check_trans()) {
            exit;
        }
    }
}

route[SDPMANAGE]{
        if(is_request() && is_method("BYE"))||(is_reply()&&$rs>299){
        rtpengine_manage("delete-delay=10");
        return;
    }
    if($rb==$null||$rb==""){
        return;
    }
    rtpengine_manage("replace-origin replace-session-connection SIP-source-address $avp(direction)");
}


route[TO_CARRIERS]{
   route(SETCALLERID);
   if(!cr_route("default", "test", "$rU", "$rU", "call_id")){
        xlog("L_ERR", "cr_route failed\n");
        return(-1);
          
   }
}

route[SETCALLERID]{
        sql_pvquery("ca", "select callerid from externcallerid where exten='$fU'","$avp(fU)");
        if($avp(fU) != ""||$avp(fU) != 0) $fU = $avp(fU);
    

}

route[CLASSIFY_SOURCE]{
    if(ds_is_from_list(GATEWAYS_SET)){
        if is_method("OPTIONS"){
            sl_send_reply(200, "ok");
            exit;
            }
        setsflag(FLAG_INTERNALLY_SOURCED);
        $avp(direction)="direction=private direction=public";
    }
}

    route[DISPATCH]{
        if(!ds_select_dst(GATEWAYS_SET,1)){
            send_reply("404", "No destination");
            xlog("Destination of DISPATCHER $du");
            return(-1);
            }
        $avp(direction)="direction=public direction=private";
        return(1);
        }
        




